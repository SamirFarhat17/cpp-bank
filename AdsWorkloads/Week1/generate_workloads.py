import os

# Create a directory to store the files
if not os.path.exists("banking_questions"):
    os.makedirs("banking_questions")

# List of 150 questions with explanations
questions = [
    ("1", "Find two accounts whose balances add up to a specific target amount."),
    ("2", "Validate the correctness of nested transaction brackets."),
    ("3", "Merge overlapping transaction time intervals for a customer."),
    ("4", "Calculate the product of all account balances except the current one."),
    ("5", "Find the contiguous sequence of transactions with the highest net balance change."),
    ("6", "Find two accounts whose balances maximize the 'water container' analogy."),
    ("7", "Find three accounts whose balances add up to zero."),
    ("8", "Remove duplicate transactions from a sorted transaction history."),
    ("9", "Rotate a list of transactions by k steps."),
    ("10", "Find the longest sequence of unique transaction types."),
    ("11", "Convert a transaction amount string to an integer."),
    ("12", "Find the longest palindromic sequence in a transaction history."),
    ("13", "Group transactions by their anagram types."),
    ("14", "Check if a transaction history is a palindrome."),
    ("15", "Find the smallest window in a transaction history containing all transaction types."),
    ("16", "Merge two sorted lists of customer accounts by account ID."),
    ("17", "Reverse the order of transactions in a customer's transaction history."),
    ("18", "Detect if a customer's transaction history contains a loop (e.g., recurring payments)."),
    ("19", "Remove the nth oldest transaction from a customer's history."),
    ("20", "Add the balances of two accounts represented as linked lists."),
    ("21", "Find the common transactions between two customers."),
    ("22", "Check if a customer's transaction history is a palindrome."),
    ("23", "Clone a customer's transaction history with random pointers."),
    ("24", "Design a cache to store the most recently accessed customer accounts."),
    ("25", "Flatten a hierarchical transaction history."),
    ("26", "Display all accounts in a hierarchical structure (e.g., parent-child relationships)."),
    ("27", "Ensure that a customer's account hierarchy is valid."),
    ("28", "Find the common parent account for two customer accounts."),
    ("29", "Determine if a customer can complete all scheduled transactions without conflicts."),
    ("30", "Count the number of isolated customer groups in a transaction network."),
    ("31", "Find the shortest sequence of transactions to transform one account type to another."),
    ("32", "Clone a customer's transaction network."),
    ("33", "Serialize and deserialize a customer's account hierarchy."),
    ("34", "Find the maximum path sum in a customer's account hierarchy."),
    ("35", "Find the longest path between two accounts in a hierarchy."),
    ("36", "Check if a customer's account hierarchy contains a path with a specific balance sum."),
    ("37", "Reconstruct a customer's account hierarchy from traversal data."),
    ("38", "Connect accounts in a hierarchy to their right siblings."),
    ("39", "Traverse a customer's account hierarchy in a zigzag pattern."),
    ("40", "Find the kth smallest account balance in a hierarchy."),
    ("41", "Calculate the number of ways a customer can reach a target balance by making incremental deposits."),
    ("42", "Determine the minimum number of transactions needed to reach a target balance."),
    ("43", "Find the longest sequence of increasing account balances."),
    ("44", "Check if a customer's transaction history can be segmented into valid transaction patterns."),
    ("45", "Find the contiguous sequence of transactions with the highest product of balances."),
    ("46", "Determine the maximum amount a customer can withdraw without triggering fraud detection."),
    ("47", "Calculate the number of ways a customer can navigate through a grid of transactions."),
    ("48", "Find the longest common sequence of transactions between two customers."),
    ("49", "Calculate the minimum number of edits needed to transform one transaction history into another."),
    ("50", "Find the maximum subarray sum after deleting one transaction."),
    ("51", "Determine the best time to buy and sell stocks for maximum profit."),
    ("52", "Optimize stock trading with a cooldown period."),
    ("53", "Find the minimum balance change path through a grid of transactions."),
    ("54", "Calculate the number of ways to decode a transaction ID."),
    ("55", "Check if a customer's transactions can be partitioned into two equal subsets."),
    ("56", "Generate all possible subsets of transactions for a customer."),
    ("57", "Generate all possible orders of transactions for a customer."),
    ("58", "Find all combinations of transactions that add up to a target balance."),
    ("59", "Partition a customer's transaction history into palindromic segments."),
    ("60", "Place transactions on a grid without conflicting with each other."),
    ("61", "Solve a Sudoku puzzle representing a customer's transaction grid."),
    ("62", "Generate all valid combinations of transaction brackets."),
    ("63", "Search for a specific transaction type in a grid of transactions."),
    ("64", "Restore valid IP addresses from a transaction ID string."),
    ("65", "Generate unique permutations of a customer's transaction history."),
    ("66", "Merge two sorted lists of transactions by date."),
    ("67", "Search for a specific transaction in a rotated (reordered) transaction history."),
    ("68", "Find the first and last occurrence of a specific transaction type."),
    ("69", "Find the kth largest transaction amount in a customer's history."),
    ("70", "Find the smallest transaction in a rotated transaction history."),
    ("71", "Search for a specific transaction in a 2D matrix of transactions."),
    ("72", "Find the median of two sorted transaction histories."),
    ("73", "Find a peak transaction amount in a customer's history."),
    ("74", "Find the first bad transaction in a customer's history."),
    ("75", "Calculate the h-index of a customer's transaction impact."),
    ("76", "Find the contiguous sequence of transactions with the highest net balance change."),
    ("77", "Determine if a customer can reach the end of their transaction history without overdrafts."),
    ("78", "Schedule transactions to minimize idle time between them."),
    ("79", "Determine the starting point for a customer to complete a circular transaction route."),
    ("80", "Find the minimum number of transactions to cover all intervals."),
    ("81", "Find the minimum number of transactions to remove to avoid overlaps."),
    ("82", "Partition a customer's transaction history into non-overlapping segments."),
    ("83", "Reconstruct a customer's transaction queue based on priority."),
    ("84", "Distribute rewards to customers based on transaction performance."),
    ("85", "Remove k digits from a transaction ID to form the smallest possible number."),
    ("86", "Find the kth largest transaction amount in a customer's history."),
    ("87", "Merge k sorted lists of transactions into one sorted list."),
    ("88", "Find the k most frequent transaction types."),
    ("89", "Calculate the median of a stream of transaction amounts."),
    ("90", "Find the maximum transaction amount in each sliding window of size k."),
    ("91", "Find the k closest transactions to a reference point."),
    ("92", "Reorganize a transaction history to avoid repeating transaction types."),
    ("93", "Schedule transactions with a cooldown period."),
    ("94", "Calculate the minimum cost to connect transaction records."),
    ("95", "Maximize the performance of a team handling transactions."),
    ("96", "Find the unique transaction in a list of duplicate transactions."),
    ("97", "Count the number of active flags in a customer's account settings."),
    ("98", "Reverse the binary representation of a transaction ID."),
    ("99", "Find the missing transaction ID in a sequence."),
    ("100", "Calculate the sum of two transaction amounts without using the '+' operator."),
    ("101", "Check if a transaction amount is a power of two."),
    ("102", "Count the number of 1s in the binary representation of each transaction ID."),
    ("103", "Calculate the Hamming distance between two transaction IDs."),
    ("104", "Calculate the total Hamming distance across all transaction IDs."),
    ("105", "Generate all subsets of transaction flags."),
    ("106", "Reverse the digits of a transaction amount."),
    ("107", "Calculate the compound interest for a customer's account."),
    ("108", "Calculate the square root of a transaction amount."),
    ("109", "Divide two transaction amounts without using multiplication or division."),
    ("110", "Convert a transaction amount to a recurring decimal."),
    ("111", "Check if a transaction ID is a happy number."),
    ("112", "Check if a transaction ID is an ugly number."),
    ("113", "Count the number of prime transaction IDs."),
    ("114", "Convert a transaction column label to a number."),
    ("115", "Convert a Roman numeral transaction ID to an integer."),
    ("116", "Design a cache to store the most recently accessed customer accounts."),
    ("117", "Design a stack that supports retrieving the minimum balance in constant time."),
    ("118", "Serialize and deserialize a customer's account hierarchy."),
    ("119", "Design a system for customers to post and view transactions."),
    ("120", "Design a system to count the number of transactions in the last 5 minutes."),
    ("121", "Design a transaction approval system."),
    ("122", "Design a game to simulate transaction flows."),
    ("123", "Design a system to track transaction times."),
    ("124", "Design a system to track customer transaction history."),
    ("125", "Design a system to add and search transaction keywords."),
    ("126", "Rotate a 2D matrix of transaction data by 90 degrees."),
    ("127", "Traverse a 2D matrix of transaction data in a spiral order."),
    ("128", "Set all rows and columns of a transaction matrix to zero if a zero is found."),
    ("129", "Simulate the evolution of a customer's transaction network."),
    ("130", "Find the next permutation of a customer's transaction history."),
    ("131", "Validate a Sudoku puzzle representing a customer's transaction grid."),
    ("132", "Find the longest sequence of consecutive transaction IDs."),
    ("133", "Calculate the amount of 'rainwater' trapped in a transaction histogram."),
    ("134", "Find the duplicate transaction ID in a list."),
    ("135", "Find the smallest missing positive transaction ID."),
    ("136", "Insert a new transaction interval into a sorted list."),
    ("137", "Merge k sorted lists of transactions into one sorted list."),
    ("138", "Find all anagrams of a transaction type in a history."),
    ("139", "Find the smallest window in a transaction history containing all transaction types."),
    ("140", "Find the maximum transaction amount in each sliding window of size k."),
    ("141", "Find the longest transaction history with at most k distinct transaction types."),
    ("142", "Find the longest transaction history with at most two distinct transaction types."),
    ("143", "Find the longest sequence of unique transaction types."),
    ("144", "Find the smallest subarray of transactions with a sum greater than or equal to a target."),
    ("145", "Find the number of subarrays of transactions that sum to k."),
    ("146", "Find the maximum sum of a circular subarray of transactions."),
    ("147", "Find the contiguous sequence of transactions with the highest product of balances."),
    ("148", "Determine the best time to buy and sell stocks for maximum profit."),
    ("149", "Optimize stock trading with multiple transactions."),
    ("150", "Optimize stock trading with a cooldown period.")
]

# Generate C++ files
for i, (number, explanation) in enumerate(questions, start=1):
    filename = f"question_{i}.cpp"
    with open(filename, "w") as f:
        f.write(f"// Question #: {number}\n")
        f.write(f"// {explanation}\n")
print("150 C++ files generated successfully!")